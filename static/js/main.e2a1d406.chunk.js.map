{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["code2letter","2","(",")","o","3","v","n","Θ","4","|","d","-","/","5","+","‖","p","=","~","6","g","8","w","7","9","[","]",";","ψ",":","!","≠","?","T","x","∆","^","√","letter2code","Object","keys","key","plainletters","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","ciphertext","plaintext","event","setState","target","value","inletter","newciphertext","decodedarr","split","map","letter","hasOwnProperty","join","encodedarr","indexOf","_this2","react_default","a","createElement","react","index_esm","defaultSize","classs","class","borderLeftWidth","type","onClick","cipher2plain","bind","rows","cols","onChange","onChangeCipher","entries","_ref","_ref2","slicedToArray","onClickAddCipher","plain2cipher","onChangePlain","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e2a1d406.chunk.js","sourcesContent":["import React, {Component, Fragment} from \"react\";\nimport \"./App.css\";\n\nimport SplitPane from \"react-split-pane\";\n//import {Button} from 'semantic-ui-react';\n//import Button from \"@material-ui/core/Button\";\nimport button from 'react-bootstrap';\nconst code2letter = {\n  \"2\": \"a\",\n  \"(\": \"b\",\n  \")\": \"c\",\n  \"o\" : \"d\",\n  \"3\": \"e\",\n  \"v\" : \"f\",\n  \"n\": \"g\",\n  \"Θ\": \"h\",\n  \"4\": \"i\",\n  \"|\": \"k\",\n  \"d\": \"l\",\n  \"-\": \"m\",\n  \"/\": \"n\",\n  \"5\": \"o\",\n  \"+\": \"p\",\n  \"‖\": \"q\",\n  \"p\": \"r\",\n  \"=\": \"s\",\n  \"~\": \"t\",\n  \"6\": \"u\",\n  \"g\": \"v\",\n  \"8\": \"w\",\n  \"w\": \"x\",\n  \"7\": \"y\",\n  \"9\": \"z\",\n  \"[\" : \"bb\",\n  \"]\" : \"cc\",\n  \";\" : \"ee\",\n  \"ψ\" : \"ff\",\n  \":\" : \"ll\",\n  \"!\" : \"oo\",\n  \"≠\" : \"pp\",\n  \"?\" : \"ss\",\n  \"T\" : \"tt\",\n  \"x\" : \"&\",\n  \"∆\" : \"ch\",\n  \"^\" : \"sh\",\n  \"√\" : \"th\",\n};\nconst cipherletters = Object.keys(code2letter);\n\nconst letter2code = {};\nfor (var key in code2letter) {\n  letter2code[code2letter[key]] = key;\n}\nconst plainletters = Object.keys(letter2code);\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      ciphertext: \"cipher\",\n      plaintext: \"I love & only love the fairer sex\"\n    };\n  }\n  onChangeCipher(event) {\n    this.setState({ciphertext: event.target.value});\n  }\n  onChangePlain(event) {\n    this.setState({plaintext: event.target.value});\n  }\n  onClickAddCipher(event)\n  {\n    const inletter=event.target.value;\n    const newciphertext =  this.state.ciphertext + inletter;\n    this.setState({ciphertext: newciphertext});\n  }\n\n  cipher2plain() {\n    const cipherarr = this.state.ciphertext.split(\"\");\n    //-alert(cipherletters);\n    //let decodedarr = cipherarr.map(letter => cipherletters.indexOf(letter) > -1 ? code2letter[letter] : letter);\n    let decodedarr = cipherarr.map(letter =>\n      code2letter.hasOwnProperty(letter) ? code2letter[letter] : letter\n    );\n    this.setState({plaintext: decodedarr.join(\"\")});\n  }\n  plain2cipher() {\n    const plainarr = this.state.plaintext.split(\"\");\n    let encodedarr = plainarr.map(letter =>\n      plainletters.indexOf(letter) > -1 ? letter2code[letter] : letter\n    );\n    this.setState({ciphertext: encodedarr.join(\"\")});\n  }\n\n  render() {\n  //   let keyboardButtons = Object.entries(code2letter).map(([key,value]) => {\n  //   return <button type=\"button\" class=\"btn btn-outline-primary\">{key}<br/>{value}</button>\n  // });\n\n    return (\n      <Fragment>\n      <SplitPane split=\"horizontal\" defaultSize=\"80%\">\n        <div classs=\"myautowrapbox\">\n          <SplitPane split=\"horizontal\" defaultSize=\"50%\">\n            <div class=\"myautowrapbox\" borderLeftWidth={40}>\n              <div>\n                {'\\t Cipher Text \\t \\t'}<button type=\"button\" class=\"btn btn-outline-primary\" onClick={this.cipher2plain.bind(this)} >\n                   Decode\n                 </button>\n                 <br/>\n               </div>\n               <div>\n                <textarea\n                  class=\"flextextarea\"\n                  rows=\"4\"\n                  cols=\"50\"\n                  onChange={this.onChangeCipher.bind(this)}\n                  value={this.state.ciphertext}\n                />\n              </div>\n            </div>\n            <div class=\"keyboard-btn-group\" >\n             {\n               Object.entries(code2letter).map(([key,value]) => {\n               return <button type=\"button\" onClick={this.onClickAddCipher.bind(this)} value={key} class=\"btn btn-outline-primary\">{key}<br/>{value}</button>\n               })\n             }\n           </div>\n          </SplitPane>\n        </div>\n        <div class=\"myautowrapbox\" borderLeftWidth={40}>\n          <div>\n            {'\\t Plaintext \\t\\t\\ '}<button type=\"button\" class=\"btn btn-outline-primary\" onClick={this.plain2cipher.bind(this)} >\n               Encode\n           </button>\n           <br/>\n         </div>\n         <div class=\"myautowrapbox\">\n          <textarea\n            class=\"flextextarea\"\n            rows=\"3\"\n            cols=\"50\"\n            onChange={this.onChangePlain.bind(this)}\n            value={this.state.plaintext}\n          />\n          </div>\n        </div>\n      </SplitPane>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}